{"version":3,"sources":["actions/game.js","actions/player.js","actions/ranking.js","actions/settings.js","pages/Login.jsx","components/Questions.jsx","components/Header.jsx","components/Loading.jsx","pages/Game.jsx","components/Button.jsx","pages/Feedbacks.jsx","pages/Settings.jsx","pages/Ranking.jsx","serviceWorker.js","reducers/player.js","reducers/game.js","reducers/ranking.js","reducers/settings.js","reducers/index.js","store/index.js","index.js","App.js"],"names":["failRequestQuestion","payload","type","failRequest","newRank","name","score","picture","receiveError","Login","props","state","email","canLogin","shouldRedirectToGame","shouldRedirectToConf","btnClass","handleChange","bind","renderButton","e","preventDefault","this","fetchToken","nameAndEmail","setState","target","value","authenticator","EMAIL_REGEX","test","length","onSubmit","className","disabled","data-testid","onClick","to","action","htmlFor","id","onChange","Component","connect","game","dispatch","a","async","fetch","tokenRequest","json","tokenJSON","token","localStorage","setItem","gravatarEmail","getNameAndEmail","JSON","stringify","player","assertions","setNameAndEmail","Questions","index","timer","showNext","shouldRedirect","showAnswers","four","ten","handleClick","timerFunction","timerEnd","clickNext","updateScore","diff","clearInterval","countdown","clearTimeout","timeOut","hard","medium","easy","diffWeight","scoreUpdater","newScore","classList","contains","setTimeout","setInterval","prevState","questions","atob","category","question","alternatives","map","mapIndex","answer","isCorrect","testid","key","difficulty","React","storageState","getItem","objState","parse","newState","setNewScore","Header","location","hashGravatar","md5","toString","src","alt","Loading","Game","randomizer","getQuestions","parameters","arr","item","incorrect_answers","i","correct_answer","sort","Math","random","results","settings","categoryId","URL","questionsRequest","questionsJSON","console","log","fetchQuestions","Button","redirect","addNewRank","MD5","inner","reset","rankingStorage","setNewRank","Feedbacks","renderButtons","Settings","getCategories","setParams","categories","loading","params","categoriesAPI","categoriesJSON","trivia_categories","Ranking","b","Boolean","window","hostname","match","INITIAL_STATE","error","playerName","ranking","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","path","component","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ecbfa95a.chunk.js","sourcesContent":["export const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nconst requestQuestions = () => ({\n  type: REQUEST_QUESTIONS,\n});\n\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS';\nconst receiveQuestions = (payload) => ({\n  type: RECEIVE_QUESTIONS,\n  payload,\n});\n\nexport const FAIL_REQUEST_QUESTIONS = 'FAIL_REQUEST_QUESTIONS';\nconst failRequestQuestion = (payload) => ({\n  type: FAIL_REQUEST_QUESTIONS,\n  payload,\n});\n\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nconst updateScore = (payload) => ({\n  type: UPDATE_SCORE,\n  payload,\n});\n\nexport const fetchQuestions = (token, parameters) => async (dispatch) => {\n  const { difficulty, categoryId, type } = parameters;\n  const URL = `https://opentdb.com/api.php?amount=5&category=${categoryId}&difficulty=${difficulty}&type=${type}&token=${token}&encode=base64`;\n  try {\n    dispatch(requestQuestions());\n    const questionsRequest = await fetch(URL);\n    const questionsJSON = await questionsRequest.json();\n    console.log(questionsJSON.results);\n    dispatch(receiveQuestions(questionsJSON.results));\n  } catch (e) {\n    dispatch(failRequestQuestion(e));\n  }\n};\n\nexport const INCREASE_ASSERTIONS = 'INCREASE_ASSERTIONS';\nexport const increaseAssertions = () => ({\n  type: INCREASE_ASSERTIONS,\n});\n\nexport const setNewScore = (score) => (dispatch) => {\n  dispatch(updateScore(score));\n  dispatch(increaseAssertions());\n  const storageState = localStorage.getItem('state');\n  const objState = JSON.parse(storageState);\n  const newState = {\n    ...objState.player,\n    score: objState.player.score + score,\n    assertions: objState.player.assertions + 1,\n  };\n  localStorage.setItem('state', JSON.stringify({ player: newState }));\n};\n\nexport const RESET_GAME = 'RESET_GAME';\nexport const resetGame = () => ({\n  type: RESET_GAME,\n});\n","export const REQUEST_TOKEN = 'REQUEST_TOKEN';\nconst requestToken = () => ({\n  type: REQUEST_TOKEN,\n});\n\nexport const RECEIVE_TOKEN = 'RECEIVE_TOKEN';\nconst receiveToken = (payload) => ({\n  type: RECEIVE_TOKEN,\n  payload,\n});\n\nexport const FAIL_REQUEST = 'FAIL_REQUEST';\nconst failRequest = (payload) => ({\n  type: FAIL_REQUEST,\n  payload,\n});\n\nexport const GET_NAME_EMAIL = 'GET_NAME_EMAIL';\nconst getNameAndEmail = (name, email) => ({\n  type: GET_NAME_EMAIL,\n  name,\n  email,\n});\n\nexport const setNameAndEmail = (name, gravatarEmail, score) => (dispatch) => {\n  dispatch(getNameAndEmail(name, gravatarEmail));\n  localStorage.setItem('state', JSON.stringify({\n    player: { name, gravatarEmail, score, assertions: 0 },\n  }));\n  // const rankingStorage = JSON.parse(localStorage.getItem('ranking'));\n  // if (!rankingStorage.length) {\n  //   localStorage.setItem('ranking', JSON.stringify([]));\n  // }\n};\n\nexport const getToken = () => async (dispatch) => {\n  dispatch(requestToken());\n  const TOKEN_URL = 'https://opentdb.com/api_token.php?command=request';\n  try {\n    const tokenRequest = await fetch(TOKEN_URL);\n    const tokenJSON = await tokenRequest.json();\n    dispatch(receiveToken(tokenJSON.token));\n    localStorage.setItem('token', tokenJSON.token);\n  } catch (e) {\n    dispatch(failRequest(e));\n  }\n};\n","export const NEW_RANK = 'NEW_RANK';\nconst newRank = (name, score, picture) => ({\n  type: NEW_RANK,\n  name,\n  score,\n  picture,\n});\n\nexport const setNewRank = (name, score, picture) => async (dispatch) => {\n  dispatch(newRank(name, score, picture));\n  const rankingStorage = JSON.parse(localStorage.getItem('ranking'));\n  localStorage.setItem('ranking', JSON.stringify(\n    [\n      ...rankingStorage, { name, score, picture },\n    ],\n  ));\n};\n","export const SET_PARAMETERS = 'SET_PARAMS';\nexport const setParameters = (payload) => ({\n  type: SET_PARAMETERS,\n  payload,\n});\n\nexport const REQUEST_CATEGORIES = 'REQUEST_CATEGORIES';\nconst requestCategories = () => ({\n  type: REQUEST_CATEGORIES,\n});\n\nexport const RECEIVE_CATEGORIES = 'RECEIVE_CATEGORIES';\nconst receiveCategories = (payload) => ({\n  type: RECEIVE_CATEGORIES,\n  payload,\n});\n\nexport const RECEIVE_CATEGORIES_ERROR = 'RECEIVE_CATEGORIES_ERROR';\nconst receiveError = (payload) => ({\n  type: RECEIVE_CATEGORIES_ERROR,\n  payload,\n});\n\nexport const fetchCategories = () => async (dispatch) => {\n  dispatch(requestCategories());\n  const URL = 'https://opentdb.com/api_category.php';\n  try {\n    const categoriesAPI = await fetch(URL);\n    const categoriesJSON = await categoriesAPI.json();\n    dispatch(receiveCategories(categoriesJSON.trivia_categories));\n  } catch (e) {\n    receiveError(e);\n  }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { getToken, setNameAndEmail } from '../actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      canLogin: false,\n      shouldRedirectToGame: false,\n      shouldRedirectToConf: false,\n      btnClass: 'btn btn-light',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.renderButton = this.renderButton.bind(this);\n  }\n\n  async onSubmit(e) {\n    e.preventDefault();\n    const { fetchToken, nameAndEmail, score } = this.props;\n    const { name, email } = this.state;\n    fetchToken();\n    nameAndEmail(name, email, score);\n    this.setState({ shouldRedirectToGame: true });\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    }, () => this.authenticator());\n  }\n\n  authenticator() {\n    const { name, email } = this.state;\n    const EMAIL_REGEX = /^[a-z0-9_.]+@[a-z0-9]+\\.[a-z]{2,3}(?:\\.[a-z]{2})?$/;\n    this.setState({\n      canLogin: (EMAIL_REGEX.test(email) && name.length > 0),\n    });\n    if ((EMAIL_REGEX.test(email) && name.length > 0)) {\n      this.setState({\n        btnClass: 'btn btn-info',\n      });\n    } else {\n      this.setState({\n        btnClass: 'btn btn-light',\n      });\n    }\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  renderButton() {\n    const { canLogin, btnClass } = this.state;\n    return (\n      <div className=\"buttons row\">\n        <button\n          disabled={ !canLogin }\n          type=\"submit\"\n          data-testid=\"btn-play\"\n          className={ btnClass }\n        >\n          Jogar\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ () => this.setState({ shouldRedirectToConf: true }) }\n          className=\"btn btn-dark\"\n        >\n          Configurações\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    const { name, email, shouldRedirectToGame, shouldRedirectToConf } = this.state;\n\n    if (shouldRedirectToGame) return <Redirect to=\"/game\" />;\n    if (shouldRedirectToConf) return <Redirect to=\"/settings\" />;\n\n    return (\n      <main className=\"login-page row  align-items-center\">\n        <h1>\n          TRIVIA\n          <h3>REACT REDUX</h3>\n        </h1>\n        <form\n          className=\"container\"\n          action=\"GET\"\n          onSubmit={ this.onSubmit }\n        >\n          <div className=\"row\">\n            <label htmlFor=\"name-input\" className=\"form-label\">\n              Nome\n              <input\n                type=\"text\"\n                value={ name }\n                name=\"name\"\n                id=\"name-input\"\n                onChange={ this.handleChange }\n                data-testid=\"input-player-name\"\n                className=\"form-control\"\n              />\n            </label>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"email-input\" className=\"form-label\">\n              Email\n              <input\n                type=\"email\"\n                value={ email }\n                name=\"email\"\n                id=\"email-input\"\n                onChange={ this.handleChange }\n                data-testid=\"input-gravatar-email\"\n                className=\"form-control\"\n              />\n            </label>\n          </div>\n          { this.renderButton() }\n        </form>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchToken: () => dispatch(getToken()),\n  nameAndEmail: (name, email, score) => dispatch(setNameAndEmail(name, email, score)),\n});\n\nconst mapStateToProps = (state) => ({\n  score: state.game.score,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  fetchToken: PropTypes.func.isRequired,\n  nameAndEmail: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { setNewScore } from '../actions';\n\nclass Questions extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      index: 0,\n      disabled: false,\n      timer: 30,\n      showNext: false,\n      score: 0,\n      shouldRedirect: false,\n      showAnswers: false,\n    };\n    this.four = 4;\n    this.ten = 10;\n\n    this.handleClick = this.handleClick.bind(this);\n    this.timerFunction = this.timerFunction.bind(this);\n    this.timerEnd = this.timerEnd.bind(this);\n    this.clickNext = this.clickNext.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerFunction();\n    this.timerEnd();\n  }\n\n  handleClick(target, diff) {\n    clearInterval(this.countdown);\n    clearTimeout(this.timeOut);\n    const diffWeight = {\n      hard: 3,\n      medium: 2,\n      easy: 1,\n    };\n    this.setState({\n      disabled: true,\n      showNext: true,\n      showAnswers: true,\n    }, this.updateScore(diffWeight[diff], target));\n  }\n\n  updateScore(diffWeight, target) {\n    const { timer } = this.state;\n    const { score } = this.state;\n    const { scoreUpdater } = this.props;\n    const newScore = score + this.ten + (timer * diffWeight);\n    if (target.classList.contains('true')) {\n      this.setState({ score: newScore });\n      scoreUpdater(newScore);\n    }\n  }\n\n  timerEnd() {\n    const thirySeconds = 30005;\n    this.timeOut = setTimeout(() => {\n      this.setState({\n        disabled: true,\n        showNext: true,\n        showAnswers: true,\n      }, clearInterval(this.countdown));\n    }, thirySeconds);\n  }\n\n  timerFunction() {\n    const oneSecond = 1000;\n    this.countdown = setInterval(() => {\n      this.setState((prevState) => {\n        if (prevState.timer > 0) {\n          return ({\n            ...prevState,\n            timer: prevState.timer - 1,\n          });\n        }\n      });\n    }, oneSecond);\n  }\n\n  clickNext() {\n    const { index } = this.state;\n    if (index < this.four) {\n      this.setState({\n        index: index + 1, showAnswers: false, showNext: false, disabled: false, timer: 30,\n      });\n    } else this.setState({ shouldRedirect: true });\n    this.timerEnd();\n    this.timerFunction();\n  }\n\n  render() {\n    const { index, disabled, timer, showNext, shouldRedirect, showAnswers } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/feedbacks\" />;\n    const { questions } = this.props;\n    return (\n      <main className=\"game-container position-absolute d-flex flex-column\">\n        <h2 className=\"position-absolute timer\">\n          <p>{timer}</p>\n        </h2>\n        <h2 data-testid=\"question-category\" className=\"category\">\n          {atob(questions[index].category)}\n        </h2>\n        <h4\n          data-testid=\"question-text\"\n          className=\"question\"\n        >\n          {atob(questions[index].question)}\n        </h4>\n        {questions[index].alternatives.map(({\n          answer, isCorrect, testid, className,\n        }, mapIndex) => (\n          <button\n            type=\"button\"\n            key={ `answer-${mapIndex}` }\n            data-testid={ testid }\n            className={\n              showAnswers ? `${className} ${isCorrect}` : `${isCorrect} btn btn-secondary`\n            }\n            disabled={ disabled }\n            onClick={ ({ target }) => (\n              this.handleClick(target, atob(questions[index].difficulty))\n            ) }\n          >\n            {atob(answer)}\n          </button>\n        ))}\n        {showNext && (\n          <button\n            data-testid=\"btn-next\"\n            type=\"button\"\n            onClick={ this.clickNext }\n            className=\"position-absolute btn-next btn btn-dark\"\n          >\n            {index < this.four ? 'Próxima' : 'Finalizar'}\n          </button>\n        )}\n      </main>);\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  scoreUpdater: (score) => dispatch(setNewScore(score)),\n  // newRank: (name, score, picture) => dispatch(setNewRank(name, score, picture)),\n});\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  email: state.player.email,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n\nQuestions.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  scoreUpdater: PropTypes.func.isRequired,\n  // newRank: PropTypes.func.isRequired,\n  // name: PropTypes.string.isRequired,\n  // email: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\n\nclass Header extends Component {\n  render() {\n    const { name, email, score, location } = this.props;\n    const hashGravatar = md5(email).toString();\n    return (\n      <header className=\"fixed-top row justify-content-center align-items-center\">\n        <h1 className=\"header-title position-absolute\">TRIVIA</h1>\n        <img\n          data-testid=\"header-profile-picture\"\n          src={ `https://www.gravatar.com/avatar/${hashGravatar}` }\n          alt=\"avatar\"\n        />\n        <h4 className=\"header-name\" data-testid=\"header-player-name\">{ name }</h4>\n        {location === 'ranking' ? null\n          : (\n            <h4 className=\"header-score position-absolute\" data-testid=\"header-score\">\n              Pontuação:\n              {score}\n            </h4>)}\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  location: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  email: state.player.email,\n  score: state.game.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <main className=\"loading-screen row\">\n        <h1>Loading</h1>\n        <div className=\"lds-ellipsis\">\n          <div />\n          <div />\n          <div />\n          <div />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Questions from '../components/Questions';\nimport { fetchQuestions } from '../actions/game';\nimport Header from '../components/Header';\nimport Loading from '../components/Loading';\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.randomizer = this.randomizer.bind(this);\n  }\n\n  componentDidMount() {\n    const { token, getQuestions, parameters } = this.props;\n    getQuestions(token, parameters);\n    const rankingStorage = JSON.parse(localStorage.getItem('ranking'));\n    if (!rankingStorage) {\n      localStorage.setItem('ranking', JSON.stringify([]));\n    }\n  }\n\n  randomizer(arr) {\n    const randomValue = 0.5;\n    const randomizedAlternatives = arr.map((item) => (\n      {\n        question: item.question,\n        category: item.category,\n        difficulty: item.difficulty,\n        alternatives: [\n          ...item.incorrect_answers.map((answer, i) => ({\n            answer,\n            testid: `wrong-answer-${i}`,\n            className: 'btn btn-danger',\n            isCorrect: false,\n          })), {\n            answer: item.correct_answer,\n            testid: 'correct-answer',\n            className: 'btn btn-success',\n            isCorrect: true,\n          },\n        ].sort(() => Math.random() - randomValue),\n      }\n    ));\n    return (randomizedAlternatives);\n  }\n\n  render() {\n    const { questions } = this.props;\n    if (!questions.length) return <Loading />;\n    return (\n      <main className=\"game-page d-flex\">\n        <Header location=\"game\" />\n        <Questions questions={ this.randomizer(questions) } />\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.player.token,\n  questions: state.game.results,\n  parameters: state.settings.parameters,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQuestions: (token, parameters) => dispatch(fetchQuestions(token, parameters)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n\nGame.propTypes = {\n  token: PropTypes.string.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  parameters: PropTypes.objectOf(PropTypes.string).isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { MD5 } from 'crypto-js';\nimport { setNewRank, resetGame } from '../actions';\n\nclass Button extends Component {\n  constructor() {\n    super();\n    this.state = {\n      shouldRedirect: false,\n    };\n    this.redirect = this.redirect.bind(this);\n    this.addNewRank = this.addNewRank.bind(this);\n  }\n\n  redirect() {\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  addNewRank() {\n    const { newRank, name, email, score } = this.props;\n    const hashGravatar = MD5(email).toString();\n    newRank(name, score, `https://www.gravatar.com/avatar/${hashGravatar}`);\n  }\n\n  render() {\n    const { testid, inner, to, reset, className } = this.props;\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to={ to } />;\n    return (\n      <button\n        data-testid={ testid }\n        type=\"button\"\n        onClick={ () => {\n          this.redirect();\n          if (to === '/ranking') this.addNewRank();\n          else reset();\n        } }\n        className={ className }\n      >\n        {inner}\n      </button>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  newRank: (name, score, picture) => dispatch(setNewRank(name, score, picture)),\n  reset: () => dispatch(resetGame()),\n});\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  email: state.player.email,\n  score: state.game.score,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);\n\nButton.propTypes = {\n  testid: PropTypes.string.isRequired,\n  inner: PropTypes.string.isRequired,\n  to: PropTypes.string.isRequired,\n  newRank: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  email: PropTypes.string.isRequired,\n  reset: PropTypes.func.isRequired,\n  className: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Button from '../components/Button';\n\nclass Feedbacks extends Component {\n  constructor() {\n    super();\n    this.renderButtons = this.renderButtons.bind(this);\n  }\n\n  renderButtons() {\n    return (\n      <div>\n        <Button\n          testid=\"btn-play-again\"\n          inner=\"Jogar novamente!\"\n          to=\"/\"\n          className=\"btn btn-info\"\n        />\n        <Button\n          testid=\"btn-ranking\"\n          inner=\"Ver ranking\"\n          to=\"/ranking\"\n          className=\"btn btn-dark\"\n        />\n      </div>);\n  }\n\n  render() {\n    const { assertions, score } = this.props;\n    const minAssertions = 3;\n    return (\n      <main className=\"feedback-page d-flex\">\n        <Header location=\"feedback\" />\n        <div className=\"feedback-container position-absolute d-flex flex-column\">\n          <h1\n            data-testid=\"feedback-text\"\n            className=\"feedback-text position-absolute\"\n          >\n            {assertions < minAssertions ? 'Podia ser melhor...' : 'Mandou bem!'}\n          </h1>\n          <h3 data-testid=\"feedback-total-score\">\n            Sua pontuação foi:\n            {' '}\n            <span\n              className={\n                assertions < minAssertions ? 'low-assertions' : 'high-assertions'\n              }\n            >\n              {score}\n\n            </span>\n          </h3>\n          <h4 data-testid=\"feedback-total-question\">\n            Você acertou\n            {' '}\n            <span\n              className={\n                assertions < minAssertions ? 'low-assertions' : 'high-assertions'\n              }\n            >\n              {assertions}\n            </span>\n            {' '}\n            de 5 perguntas\n          </h4>\n          {this.renderButtons()}\n        </div>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  assertions: state.game.assertions,\n  score: state.game.score,\n});\n\nFeedbacks.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps)(Feedbacks);\n","/* eslint-disable max-len */\n/* eslint-disable react/jsx-max-depth */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { fetchCategories, setParameters } from '../actions';\nimport Loading from '../components/Loading';\n\nclass Settings extends Component {\n  constructor() {\n    super();\n    this.state = {\n      parameters: {\n        type: '',\n        difficulty: '',\n        categoryId: 0,\n      },\n      redirect: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { getCategories } = this.props;\n    getCategories();\n  }\n\n  handleChange({ target: { name, value } }) {\n    const { parameters } = this.state;\n    this.setState({\n      parameters: {\n        ...parameters,\n        [name]: value,\n      },\n    });\n  }\n\n  // eslint-disable-next-line max-lines-per-function\n  render() {\n    const { setParams, categories, loading } = this.props;\n    const { parameters, redirect } = this.state;\n    if (loading) return <Loading />;\n    if (redirect) return <Redirect to=\"/\" />;\n    return (\n      <main className=\"settings-screen d-flex\">\n        <div className=\"outter-container d-flex\">\n          <div className=\"settings-container d-flex flex-column\">\n            <h1 data-testid=\"settings-title\" className=\"settings-title\">Configurações</h1>\n            <label htmlFor=\"category-select\" className=\"form-label\">\n              Categoria\n              <select\n                name=\"categoryId\"\n                id=\"category-select\"\n                onChange={ this.handleChange }\n                className=\"form-select\"\n              >\n                <option value=\"\">Todas</option>\n                {categories.map(({ id, name }) => (\n                  <option value={ id } key={ id }>{name}</option>\n                ))}\n              </select>\n            </label>\n            <label htmlFor=\"diff-select\" className=\"form-label\">\n              Dificuldade\n              <select\n                name=\"difficulty\"\n                id=\"difficulty-select\"\n                onChange={ this.handleChange }\n                className=\"form-select\"\n              >\n                <option value=\"\">Todas</option>\n                <option value=\"easy\">Fácil</option>\n                <option value=\"medium\">Média</option>\n                <option value=\"hard\">Difícil</option>\n              </select>\n            </label>\n            <label htmlFor=\"type-select\" className=\"form-label\">\n              Tipo\n              <select\n                name=\"type\"\n                id=\"type-select\"\n                onChange={ this.handleChange }\n                className=\"form-select\"\n              >\n                <option value=\"\">Todas</option>\n                <option value=\"multiple\">Múltipla escolha</option>\n                <option value=\"boolean\">Verdadeiro / Falso</option>\n              </select>\n            </label>\n            <div>\n              <button\n                type=\"button\"\n                onClick={ () => {\n                  setParams(parameters);\n                  this.setState({\n                    redirect: true,\n                  });\n                } }\n                className=\"btn btn-dark\"\n              >\n                Configurar\n              </button>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  categories: state.settings.categories,\n  loading: state.settings.loading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setParams: (params) => dispatch(setParameters(params)),\n  getCategories: () => dispatch(fetchCategories()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n\nSettings.propTypes = {\n  setParams: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  categories: PropTypes.arrayOf(PropTypes.object).isRequired,\n  getCategories: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport Button from '../components/Button';\nimport Header from '../components/Header';\n\nclass Ranking extends Component {\n  render() {\n    const rankingStorage = JSON.parse(localStorage.getItem('ranking'));\n    console.log(rankingStorage);\n    return (\n      <main className=\"ranking-page d-flex flex-column position-absolute\">\n        <Header location=\"ranking\" />\n        <div className=\"ranking-container d-flex flex-column position-absolute\">\n          <h1 data-testid=\"ranking-title\" className=\"ranking-title\">Ranking</h1>\n          <div className=\"ranking-list\">\n            {rankingStorage\n              .sort((a, b) => b.score - a.score)\n              .map(({ name, score, picture }, i) => (\n                <div key={ `name-${i}` } className=\"ranking row\">\n                  <img src={ picture } alt={ `${name} avatar` } />\n                  <h3 data-testid={ `player-name-${i}` }>{name}</h3>\n                  <h3 data-testid={ `player-score-${i}` }>{score}</h3>\n                </div>\n              ))}\n          </div>\n          <Button\n            testid=\"btn-go-home\"\n            inner=\"Voltar ao início\"\n            to=\"/\"\n            className=\"btn btn-info\"\n          />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Ranking;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FAIL_REQUEST, RECEIVE_TOKEN, REQUEST_TOKEN, GET_NAME_EMAIL } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n  token: '',\n  loading: false,\n  error: null,\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_TOKEN:\n    return ({\n      ...state,\n      loading: true,\n    });\n  case RECEIVE_TOKEN:\n    return ({\n      ...state,\n      loading: false,\n      token: action.payload,\n    });\n  case FAIL_REQUEST:\n    return ({\n      ...state,\n      loading: false,\n      error: action.payload,\n    });\n  case GET_NAME_EMAIL:\n    return ({\n      ...state,\n      name: action.name,\n      email: action.email,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","// import { UPDATE_SCORE } from '../actions';\nimport {\n  UPDATE_SCORE,\n  FAIL_REQUEST_QUESTIONS,\n  RECEIVE_QUESTIONS,\n  REQUEST_QUESTIONS,\n  INCREASE_ASSERTIONS,\n  RESET_GAME,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  results: [],\n  assertions: 0,\n  score: 0,\n  loading: false,\n};\n\nconst game = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_QUESTIONS:\n    return {\n      ...state,\n      loading: true,\n    };\n  case FAIL_REQUEST_QUESTIONS:\n    return {\n      ...state,\n      error: action.payload,\n      loading: false,\n    };\n  case RECEIVE_QUESTIONS:\n    return {\n      ...state,\n      results: action.payload,\n      loading: false,\n    };\n  case UPDATE_SCORE:\n    return {\n      ...state,\n      score: state.score + action.payload,\n    };\n  case INCREASE_ASSERTIONS:\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n    };\n  case RESET_GAME:\n    return {\n      ...state,\n      results: [],\n      score: 0,\n      assertions: 0,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default game;\n","import { NEW_RANK } from '../actions';\n\nconst INITIAL_STATE = {\n  playerName: '', score: 0, picture: '',\n};\n\nconst ranking = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case NEW_RANK:\n    return {\n      ...state,\n      playerName: action.name,\n      score: action.score,\n      picture: action.picture,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default ranking;\n","import {\n  RECEIVE_CATEGORIES,\n  RECEIVE_CATEGORIES_ERROR,\n  REQUEST_CATEGORIES,\n  SET_PARAMETERS,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  parameters: {\n    categoryId: 0,\n    difficulty: '',\n    type: '',\n  },\n  categories: [],\n  loading: false,\n};\n\nconst settings = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case REQUEST_CATEGORIES:\n    return {\n      ...state,\n      loading: true,\n    };\n  case RECEIVE_CATEGORIES:\n    return {\n      ...state,\n      categories: action.payload,\n      loading: false,\n    };\n  case RECEIVE_CATEGORIES_ERROR:\n    return {\n      ...state,\n      error: action.payload,\n      loading: false,\n    };\n  case SET_PARAMETERS:\n    return {\n      ...state,\n      parameters: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default settings;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport game from './game';\nimport ranking from './ranking';\nimport settings from './settings';\n\nconst rootReducer = combineReducers({ player, game, ranking, settings });\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\nexport default store;\n\nif (window.Cypress) {\n  window.store = store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n// import logo from './trivia.png';\nimport { Route, Switch } from 'react-router';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Feedbacks from './pages/Feedbacks';\nimport Settings from './pages/Settings';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/feedbacks\" component={ Feedbacks } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route exact path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n"],"sourceRoot":""}